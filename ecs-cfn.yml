AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Cluster:
    Type: String
    Default: octank-demo
  TargetGroup:
    Type: String
    Default: arn:aws:elasticloadbalancing:us-west-2:950174139509:targetgroup/octank-demo-test/39bb55a0948f263c
  TaskRole:
    Type: String
    Default: arn:aws:iam::950174139509:role/octank-ecs-service
  ServiceRole:
    Type: String
    Default: arn:aws:iam::950174139509:role/ecsServiceRole 
  ServiceMin:
    Type: String
    Default: 1
  ServiceMax:
    Type: String
    Default: 1
  ContainerPort:
    Type: String
    Default: 8080
  ContainerName:
    Type: String
    Default: octank-app
  DesiredCount:
    Type: String
    Default: 1
  Image:
    Type: String
    Default: 950174139509.dkr.ecr.us-west-2.amazonaws.com/octank-demo-app
  Tag:
    Type: String
    Default: latest
  Hash:
    Type: String
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: octank-app
      NetworkMode: bridge
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub ${ContainerName}-${Hash}
          Image: !Sub ${Image}:${Tag}
          #LogConfiguration:
            #- LogDriver: awslogs
              #Options: 
          MemoryReservation: 128
          PortMappings:
            - ContainerPort: !Ref ContainerPort
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      LoadBalancers:
      - ContainerName: !Sub ${ContainerName}-${Hash}
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref TargetGroup
      Role: !Ref ServiceRole
      TaskDefinition: !Ref TaskDefinition
  InService:
    Type: Custom::InService
		DependsOn: Service
    Properties:
      ServiceToken: !GetAtt InServiceFunction.Arn
      LoadBalancerName: octank-demo-test
  InServiceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          var response = require('cfn-response');
          var AWS = require('aws-sdk');
          exports.handler = (event, context) => {
            console.log("Request received:\n", JSON.stringify(event));
            var physicalId = event.PhysicalResourceId || 'none';
            var success = data => response.send(event, context, response.SUCCESS, data, physicalId);
            var failed = e => response.send(event, context, response.FAILED, e, physicalId);
            if (event.RequestType == 'Create') {
              var elb = new AWS.ELB();
              var elbParams = event.ResourceProperties;
              delete elbParams.ServiceToken;
              elb.waitFor('instanceInService', elbParams).promise().
                then((data)=> success({}), (e)=> failed(e));
            } else {
              success({});
            }
          };
      Runtime: nodejs4.3
      Timeout: 300
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ELBPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
              - 'elasticloadbalancing:DescribeInstanceHealth'
              Resource: ['*']
